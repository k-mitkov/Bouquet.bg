// <auto-generated />
using System;
using Bouquet.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bouquet.Database.Migrations
{
    [DbContext(typeof(BouquetContext))]
    [Migration("20230828081009_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bouquet.Database.Entities.Agreement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("MinFee")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Percent")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Agreements", (string)null);
                });

            modelBuilder.Entity("Bouquet.Database.Entities.AnonymousCustomer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AnonymousCustomers", (string)null);
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Bouquet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlowerShopID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FlowersCount")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlowerShopID");

                    b.ToTable("Bouquets", (string)null);
                });

            modelBuilder.Entity("Bouquet.Database.Entities.CartBouquet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BouquetID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("OrderCartId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BouquetID");

                    b.HasIndex("OrderCartId");

                    b.ToTable("CartBouquet");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.City", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Citys", (string)null);
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Color", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HexCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Colors", (string)null);
                });

            modelBuilder.Entity("Bouquet.Database.Entities.DeliveryDetails", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("PreferredTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReciverName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("DeliveryDetails", (string)null);
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Flower", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Flowers", (string)null);
                });

            modelBuilder.Entity("Bouquet.Database.Entities.FlowerShop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AgreementID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OwnerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PictureDataUrl")
                        .HasColumnType("text");

                    b.Property<string>("ShopConfigID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgreementID");

                    b.HasIndex("CityID");

                    b.HasIndex("OwnerID");

                    b.HasIndex("ShopConfigID")
                        .IsUnique();

                    b.ToTable("FlowerShops", (string)null);
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Identity.BouquetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Identity.BouquetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Identity.BouquetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CutomerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureDataUrl")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UniqueNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WalletID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("WalletID")
                        .IsUnique()
                        .HasFilter("[WalletID] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Identity.UserInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MOL")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TaxId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VatId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnonymousCustomerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeliveryDetailsID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlowerShopID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderCartID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AnonymousCustomerID");

                    b.HasIndex("DeliveryDetailsID");

                    b.HasIndex("FlowerShopID");

                    b.HasIndex("OrderCartID")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("Bouquet.Database.Entities.OrderCart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderCarts", (string)null);
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Payments.Card", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Cards", (string)null);
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Payments.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfPayment")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Picture", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BouquetID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PictureDataUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BouquetID");

                    b.ToTable("Pictures", (string)null);
                });

            modelBuilder.Entity("Bouquet.Database.Entities.ShopConfig", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("CloseAt")
                        .HasColumnType("time");

                    b.Property<string>("FlowerShopID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FreeDeliveryAt")
                        .HasColumnType("float");

                    b.Property<TimeSpan>("OpenAt")
                        .HasColumnType("time");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<TimeSpan>("SameDayTillHour")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("ShopConfigs", (string)null);
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Ammount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WalletFromID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WalletToID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrderID");

                    b.HasIndex("WalletFromID");

                    b.HasIndex("WalletToID");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Wallet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Wallets", (string)null);
                });

            modelBuilder.Entity("BouquetColor", b =>
                {
                    b.Property<string>("BouquetsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ColorsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BouquetsId", "ColorsId");

                    b.HasIndex("ColorsId");

                    b.ToTable("BouquetColor");
                });

            modelBuilder.Entity("BouquetFlower", b =>
                {
                    b.Property<string>("BouquetsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FlowersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BouquetsId", "FlowersId");

                    b.HasIndex("FlowersId");

                    b.ToTable("BouquetFlower");
                });

            modelBuilder.Entity("BouquetUserFlowerShop", b =>
                {
                    b.Property<string>("WorkPlacesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WorkPlacesId", "WorkersId");

                    b.HasIndex("WorkersId");

                    b.ToTable("BouquetUserFlowerShop");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Bouquet", b =>
                {
                    b.HasOne("Bouquet.Database.Entities.FlowerShop", "FlowerShop")
                        .WithMany("Bouquets")
                        .HasForeignKey("FlowerShopID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FlowerShop");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.CartBouquet", b =>
                {
                    b.HasOne("Bouquet.Database.Entities.Bouquet", "Bouquet")
                        .WithMany("CartBouquets")
                        .HasForeignKey("BouquetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bouquet.Database.Entities.OrderCart", null)
                        .WithMany("Bouquets")
                        .HasForeignKey("OrderCartId");

                    b.Navigation("Bouquet");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.DeliveryDetails", b =>
                {
                    b.HasOne("Bouquet.Database.Entities.Identity.BouquetUser", "User")
                        .WithMany("DeliveryDetails")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.FlowerShop", b =>
                {
                    b.HasOne("Bouquet.Database.Entities.Agreement", "Agreement")
                        .WithMany("FlowerShops")
                        .HasForeignKey("AgreementID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Bouquet.Database.Entities.City", "City")
                        .WithMany("FlowerShops")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Bouquet.Database.Entities.Identity.BouquetUser", "Owner")
                        .WithMany("OwnedShops")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Bouquet.Database.Entities.ShopConfig", "ShopConfig")
                        .WithOne("FlowerShop")
                        .HasForeignKey("Bouquet.Database.Entities.FlowerShop", "ShopConfigID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Agreement");

                    b.Navigation("City");

                    b.Navigation("Owner");

                    b.Navigation("ShopConfig");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Identity.BouquetRoleClaim", b =>
                {
                    b.HasOne("Bouquet.Database.Entities.Identity.BouquetRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Identity.BouquetUser", b =>
                {
                    b.HasOne("Bouquet.Database.Entities.Wallet", "Wallet")
                        .WithOne("Owner")
                        .HasForeignKey("Bouquet.Database.Entities.Identity.BouquetUser", "WalletID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Identity.UserInfo", b =>
                {
                    b.HasOne("Bouquet.Database.Entities.Identity.BouquetUser", "User")
                        .WithOne("UserInfo")
                        .HasForeignKey("Bouquet.Database.Entities.Identity.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Order", b =>
                {
                    b.HasOne("Bouquet.Database.Entities.AnonymousCustomer", "AnonymousCustomer")
                        .WithMany("Orders")
                        .HasForeignKey("AnonymousCustomerID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Bouquet.Database.Entities.DeliveryDetails", "DeliveryDetails")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryDetailsID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Bouquet.Database.Entities.FlowerShop", "FlowerShop")
                        .WithMany("Orders")
                        .HasForeignKey("FlowerShopID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Bouquet.Database.Entities.OrderCart", "OrderCart")
                        .WithOne("Order")
                        .HasForeignKey("Bouquet.Database.Entities.Order", "OrderCartID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Bouquet.Database.Entities.Identity.BouquetUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AnonymousCustomer");

                    b.Navigation("DeliveryDetails");

                    b.Navigation("FlowerShop");

                    b.Navigation("OrderCart");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Payments.Card", b =>
                {
                    b.HasOne("Bouquet.Database.Entities.Identity.BouquetUser", "User")
                        .WithMany("Cards")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Payments.Payment", b =>
                {
                    b.HasOne("Bouquet.Database.Entities.Payments.Card", "Card")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Picture", b =>
                {
                    b.HasOne("Bouquet.Database.Entities.Bouquet", "Bouquet")
                        .WithMany("Pictures")
                        .HasForeignKey("BouquetID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bouquet");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Transaction", b =>
                {
                    b.HasOne("Bouquet.Database.Entities.Order", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Bouquet.Database.Entities.Wallet", "WalletFrom")
                        .WithMany("TransactionsFrom")
                        .HasForeignKey("WalletFromID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Bouquet.Database.Entities.Wallet", "WalletTo")
                        .WithMany("TransactionsTo")
                        .HasForeignKey("WalletToID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("WalletFrom");

                    b.Navigation("WalletTo");
                });

            modelBuilder.Entity("BouquetColor", b =>
                {
                    b.HasOne("Bouquet.Database.Entities.Bouquet", null)
                        .WithMany()
                        .HasForeignKey("BouquetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bouquet.Database.Entities.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BouquetFlower", b =>
                {
                    b.HasOne("Bouquet.Database.Entities.Bouquet", null)
                        .WithMany()
                        .HasForeignKey("BouquetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bouquet.Database.Entities.Flower", null)
                        .WithMany()
                        .HasForeignKey("FlowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BouquetUserFlowerShop", b =>
                {
                    b.HasOne("Bouquet.Database.Entities.FlowerShop", null)
                        .WithMany()
                        .HasForeignKey("WorkPlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bouquet.Database.Entities.Identity.BouquetUser", null)
                        .WithMany()
                        .HasForeignKey("WorkersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Bouquet.Database.Entities.Identity.BouquetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Bouquet.Database.Entities.Identity.BouquetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Bouquet.Database.Entities.Identity.BouquetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bouquet.Database.Entities.Identity.BouquetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Bouquet.Database.Entities.Identity.BouquetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Agreement", b =>
                {
                    b.Navigation("FlowerShops");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.AnonymousCustomer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Bouquet", b =>
                {
                    b.Navigation("CartBouquets");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.City", b =>
                {
                    b.Navigation("FlowerShops");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.DeliveryDetails", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.FlowerShop", b =>
                {
                    b.Navigation("Bouquets");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Identity.BouquetRole", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Identity.BouquetUser", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("DeliveryDetails");

                    b.Navigation("Orders");

                    b.Navigation("OwnedShops");

                    b.Navigation("UserInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Order", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.OrderCart", b =>
                {
                    b.Navigation("Bouquets");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Payments.Card", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.ShopConfig", b =>
                {
                    b.Navigation("FlowerShop");
                });

            modelBuilder.Entity("Bouquet.Database.Entities.Wallet", b =>
                {
                    b.Navigation("Owner");

                    b.Navigation("TransactionsFrom");

                    b.Navigation("TransactionsTo");
                });
#pragma warning restore 612, 618
        }
    }
}
